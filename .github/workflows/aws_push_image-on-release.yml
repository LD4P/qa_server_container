# Description: Builds and pushes the Docker image created by Dockerfile to AWS ECR.
#
# ------------------------
# Outside Configurations
# ------------------------
# 1. Create the repository in AWS ECR.
#      Use naming convention `-dev` (e.g. ld4p/qa_authority_lookup-dev) for dev branch
#      Use naming convention of no extension (e.g. ld4p/qa_authority_lookup) for main branch
#
# 2. Set GitHub Repository Secrets in GitHub application repo (the one defining the image, e.g. ld4p/qa_server_container).
#    In GitHub repository click: Settings -> Secrets -> New repository secret -> add the following secrets
#      * Name: AWS_ACCESS_KEY_ID
#        Value: _copy access key from AWS automation user_
#      * Name: AWS_SECRET_ACCESS_KEY
#        Value: _copy secret access key from AWS automation user_
#
# ------------------------
# Updates to this Configuration
# ------------------------
# 1. Set the branch name
#    Branch: (choose one) update on -> push -> branches in this config.
#      * Set to [ dev ] for build of commits to dev branch
#      * Set to [ main ] for build of commits to main branch
#
# 2. Set the ECR_REPOSITORY name
#      * update jobs -> build -> steps -> step named Build, tag, and push -> env -> ECR_REPOSITORY in this config.
#      * Set to repository name as created in AWS ECR, for example
#          ld4p/qa_authority_lookup-dev for [ dev ] branch
#          ld4p/qa_authority_lookup for [ main ] branch
#
name: Push ld4p/qa_server_container image to Amazon ECR as ld4p/qa_authority_lookup

on: 
  release:
    types:
      - created

jobs:
  build:
    name: Build production image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set variables
      run: |
        VER=$(cat VERSION)
        echo "VERSION=$VER" >> $GITHUB_ENV
        echo "REPOSITORY_NAME=ld4p/qa_authority_lookup" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Docker Login
      id: login-ecr-public
      uses: docker/login-action@v1.10.0
      with:
        registry: public.ecr.aws
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      env:
        AWS_REGION: us-east-1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        ECR_REPOSITORY: ${{ env.REPOSITORY_NAME }}
        SHA_IMAGE_TAG: ${{ github.sha }}
        VERSION_IMAGE_TAG: ${{ env.VERSION }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
