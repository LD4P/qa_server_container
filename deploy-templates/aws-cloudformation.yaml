AWSTemplateFormatVersion: "2010-09-09"
Description: >
  1. Make a copy of parameters.env.example and rename it to parameters.env, then populate it with the values appropriate to your environment. CloudFormation will read those values from the file if you pass it on the command line when you create or update the stack.
  2. Navigate to the directory that contains these files and run the following aws cli command:
  aws cloudformation create-stack --stack-name qa-server-cf-container-with-lb \
  --template-body file://./aws-cloudformation.yaml \
  --parameters file://./parameters.env
  3. You will need to validate the ACM certificate after the stack has been created, by creating the DNS record that will appear in the CloudFormation and ACM consoles.
Parameters:
  AWSAccountId:
    Type: String
    Default: ''
    Description: Your AWS Account ID number
  AWSVpcId:
    Type: String
    Default: ''
    Description: Your AWS VPC ID
  TaskDefinitionName:
    Type: String
    Default: ''
    Description: Name of the task definition and the task definition family
  S3BucketName:
    Type: String
    Default: ''
    Description: Name of the S3 bucket where environment file resides
  EnvFileName:
    Type: String
    Default: ''
    Description: Name of the environment file  
  ImageLocation:
    Type: String
    Default: ''
    Description: Full path to the container image for the qa-server application, including repository URL and tag
  VolumeId:
    Type: String
    Default: ''
    Description: ID of the volume where the database and authority files are stored
  AuthorityVolumeName:
    Type: String
    Default: ''
    Description: Name of the volume where the authority files are stored
  AuthorityAccessPointId:
    Type: String
    Default: ''
    Description: EFS Access Point ID of the volume where the authority files are stored
  DatabaseVolumeName:
    Type: String
    Default: ''
    Description: Name of the volume where the database is stored
  DatabaseAccessPointId:
    Type: String
    Default: ''
    Description: EFS Access Point ID of the volume where the database is stored
  DomainName:
    Type: String
    Default: ''
    Description: Domain name to use for the public facing service
Resources:
# TODO: Add a cluster definition 
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join ["", ["/ecs/", !Ref TaskDefinitionName, "-lb"]]
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: !Ref TaskDefinitionName
      ContainerDefinitions: 
        - Name: 'qa-server-app'
          Cpu: 0
          EnvironmentFiles: 
            - Type: s3
              Value: !Join ["", ["arn:aws:s3:::", !Ref S3BucketName, "/", !Ref EnvFileName]]
          Essential: True
          Image: !Ref ImageLocation
          Links: 
            - qa-mariadb
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["", ["/ecs/", !Ref TaskDefinitionName, "-lb"]]
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          MemoryReservation: 512
          MountPoints: 
            - SourceVolume: !Ref AuthorityVolumeName
              ContainerPath: /app/ld4p/qa_server-webapp/config/authorities
          PortMappings: 
            - HostPort: 3000
              Protocol: tcp
              ContainerPort: 3000
        - Name: 'qa-mariadb'
          Cpu: 0
          EnvironmentFiles: 
            - Type: s3
              Value: !Join ["", ["arn:aws:s3:::", !Ref S3BucketName, "/", !Ref EnvFileName]]
          Essential: True
          Image: mariadb:latest
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["", ["/ecs/", !Ref TaskDefinitionName, "-lb"]]
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          MemoryReservation: 512
          MountPoints: 
            - SourceVolume: !Ref DatabaseVolumeName
              ContainerPath: /var/lib/mysql/data
          PortMappings: 
            - HostPort: 3306
              Protocol: tcp
              ContainerPort: 3306
      Cpu: 1024
      ExecutionRoleArn: !Join ["", ["arn:aws:iam::", !Ref AWSAccountId, ":role/ecsTaskExecutionRole"]]
#      ExecutionRoleArn: arn:aws:iam::092831676293:role/ecsTaskExecutionRole
      Memory: 1024
      NetworkMode: bridge
      RequiresCompatibilities: 
        - EC2
#      Tags: 
#        - Tag
      TaskRoleArn: !Join ["", ["arn:aws:iam::", !Ref AWSAccountId, ":role/ecsTaskExecutionRole"]]
#      TaskRoleArn: arn:aws:iam::092831676293:role/ecsTaskExecutionRole
      Volumes: 
      # The volumes below are examples of EFS volumes which are assumed to exist before
      # this stack is created, and the IDs must be passed as parameters.
        - Name: !Ref AuthorityVolumeName
          EFSVolumeConfiguration:
            FilesystemId: !Ref VolumeId
            AuthorizationConfig: 
              Iam: DISABLED
              AccessPointId: !Ref AuthorityAccessPointId
            RootDirectory: "/"
            TransitEncryption: ENABLED
        - Name: !Ref DatabaseVolumeName
          EFSVolumeConfiguration:
            FilesystemId: !Ref VolumeId
            AuthorizationConfig: 
              Iam: DISABLED
              AccessPointId: !Ref DatabaseAccessPointId
            RootDirectory: "/"
            TransitEncryption: ENABLED
  ACMCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ["", ["*.", !Ref DomainName]]
      SubjectAlternativeNames:
        - !Ref DomainName
      ValidationMethod: DNS
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      # LoadBalancerAttributes:
      #   - LoadBalancerAttribute
      Name: !Join ["", [!Ref TaskDefinitionName, "-lb"]]
      Scheme: internet-facing
      SecurityGroups:
        # sg-9b74a3d2 = Permit TCP 80 and 443 from ANY
        - sg-9b74a3d2

      # SubnetMappings:
      #   - String
      Subnets:
        # subnet-d7ad4ca1 = cu-lit-Subnet-Public-1
        - subnet-d7ad4ca1
        # subnet-83a890da = cu-lit-Subnet-Public-2
        - subnet-83a890da
      Tags:
        - Key: Name
          Value:
            Ref: TaskDefinitionName
      Type: application
  SecurityGroupLB:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group to attach to the service load balancer
      GroupName: qa-server-service-group
      VpcId: !Ref AWSVpcId
  SecurityGroupCI:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group to attach to the container instances
      GroupName: qa-server-instance-group
      VpcId: !Ref AWSVpcId
  SecurityGroupEgressCI:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref SecurityGroupCI
      DestinationSecurityGroupId: !GetAtt SecurityGroupLB.GroupId
  SecurityGroupIngressCI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref SecurityGroupCI
      SourceSecurityGroupId: !GetAtt SecurityGroupLB.GroupId
      SourceSecurityGroupOwnerId: !Ref AWSAccountId
  SecurityGroupEgressLB:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref SecurityGroupLB
      DestinationSecurityGroupId: !GetAtt SecurityGroupCI.GroupId
  SecurityGroupIngressLB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref SecurityGroupLB
      SourceSecurityGroupId: !GetAtt SecurityGroupCI.GroupId
      SourceSecurityGroupOwnerId: !Ref AWSAccountId
  TargetGroup80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
        HttpCode: 302
      Name: !Join ["", [!Ref TaskDefinitionName, "-80"]]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: vpc-5e5cfd3a
  Listener80:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup80
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"
  Listener443:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref ACMCert
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup80
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"

