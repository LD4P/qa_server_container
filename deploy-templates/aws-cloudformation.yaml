AWSTemplateFormatVersion: "2010-09-09"
Description: >
  1. Make a copy of parameters.env.example and rename it to parameters.env, then populate it with the values appropriate to your environment. CloudFormation will read those values from the file if you pass it on the command line when you create or update the stack. See the parameter definitions below for full instructions.
  2. Navigate to the directory that contains these files and run the following aws cli command:
  aws cloudformation create-stack --stack-name qa-server \
  --template-body file://./aws-cloudformation.yaml \
  --parameters file://./parameters-copy.env --capabilities CAPABILITY_NAMED_IAM \
  --profile qa-useer --role-arn arn:aws:iam::<your_account_id>:role/qa-role
  3. You will need to validate the ACM certificate after the stack has been created, by creating the DNS record that will appear in the CloudFormation and ACM consoles.
  
Parameters:
  AWSVpcId:
    Type: String
    Default: ''
    Description: Your AWS VPC ID. It should look like vpc-1a2b3c4d. Required for load balancer configuration and security group rules.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select two subnets in your selected VPC. The values must be separated by commas.
  TaskDefinitionName:
    Type: String
    Default: ''
    Description: Name of the task definition and the task definition family. This can be anything you like, but should not contain spaces. It is reused in naming the load balancer and the log groups.
  S3BucketName:
    Type: String
    Default: ''
    Description: Name of the S3 bucket where the environment file resides.  If you ran the prerequisites template, this value should match the one you used in that template.
  EnvFileName:
    Type: String
    Default: ''
    Description: Name of the environment file. The environment file must exist prior to running this template, or else the application will fail to launch. You can use a copy of the parameters.env.example file, populated with values appropriate to your environment.
  ImageLocation:
    Type: String
    Default: ''
    Description: Full path to the container image for the qa-server application, including repository URL and tag. This must be a repo within Amazon ECR, or a publicly accessible repo. Private repo authentication is not available at this time.
  VolumeId:
    Type: String
    Default: ''
    Description: ID of the volume where the database and authority files are stored. This is an EFS volume that must exist for the application to launch. The EFS volume must contain two access points that are specified in the next two parameters.
  AuthorityAccessPointId:
    Type: String
    Default: ''
    Description: EFS Access Point ID of the volume where the authority files are stored. This will map to the application's authority file volume, and it should contain at least one authority file. If no authority files are found, the application will still launch, and static portions will display, but the Authorities, Check Status, and Monitor Status pages may behave unpredictably.
  DatabaseAccessPointId:
    Type: String
    Default: ''
    Description: EFS Access Point ID of the volume where the database is stored. This can be empty at first launch, and it should be reused in subsequent launches if persistence of the data is desired. 
  DomainName:
    Type: String
    Default: ''
    Description: Domain name to use for the public facing service. This is only used to provision the ACM certificate for the load balancer to serve secure connections. If this is not desired, the certificate resource can be removed from this template, along with the load balancer listener for port 443 that requires the certificate. If this domain is hosted in Route 53, nothing need be done to validate the domain. If it is not hosted in Route 53, you will need to validate the domain by creating a CNAME record with a unique value. You will find the value in the output of this template.
  InstanceType:
    Description: EC2 instance type for the cluster. This is recommended to be a type with at least 2 CPUs and 8 GiB of RAM, but you can change it here if you need to.
    Type: String
    Default: m5.large
Mappings:
  AWSRegionToAMI:
    Description: This list of ECS-optimized AMIs will change over time and will need to be maintained. You can get the most recent AMI for your current region with the command `aws ssm get-parameters --names /aws/service/ecs/optimized-ami/amazon-linux-2/recommended`. If your region is known and does not change, the others can be ignored or removed safely.
    us-east-1:
      AMIID: ami-08a29dcf20b8fea61
    us-east-2:
      AMIID: ami-0a9e12068cb98a01d
    us-west-1:
      AMIID: ami-0fa6c8d131a220017
    us-west-2:
      AMIID: ami-078c97cf1cefd1b38
    eu-west-1:
      AMIID: ami-0c9ef930279337028
    eu-central-1:
      AMIID: ami-065c1e34da68f2b02
    ap-northeast-1:
      AMIID: ami-02265963d1614d04d
    ap-southeast-1:
      AMIID: ami-0b68661b29b9e058c
    ap-southeast-2:
      AMIID: ami-00e4b147599c13588
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: !Ref TaskDefinitionName
      ContainerDefinitions: 
        - Name: 'qa-server-app'
          Cpu: 0
          EnvironmentFiles: 
            - Type: s3
              Value: !Join ["", ["arn:aws:s3:::", !Ref S3BucketName, "/", !Ref EnvFileName]]
          Essential: True
          Image: !Ref ImageLocation
          Links: 
            - qa-mariadb
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["", ["/ecs/", !Ref AWS::StackName, "-lb"]]
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          MemoryReservation: 512
          MountPoints: 
            - SourceVolume: qa-server-authorities
              ContainerPath: /app/ld4p/qa_server-webapp/config/authorities
          PortMappings: 
            - HostPort: 3000
              Protocol: tcp
              ContainerPort: 3000
        - Name: 'qa-mariadb'
          Cpu: 0
          EnvironmentFiles: 
            - Type: s3
              Value: !Join ["", ["arn:aws:s3:::", !Ref S3BucketName, "/", !Ref EnvFileName]]
          Essential: True
          Image: mariadb:latest
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["", ["/ecs/", !Ref AWS::StackName, "-lb"]]
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          MemoryReservation: 512
          MountPoints: 
            - SourceVolume: db-mysql-data
              ContainerPath: /var/lib/mysql/data
          PortMappings: 
            - HostPort: 3306
              Protocol: tcp
              ContainerPort: 3306
      Cpu: 1024
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      Memory: 1024
      NetworkMode: bridge
      RequiresCompatibilities: 
        - EC2
      TaskRoleArn: !GetAtt TaskRole.Arn
      Volumes: 
        - Name: qa-server-authorities
          EFSVolumeConfiguration:
            FilesystemId: !Ref VolumeId
            AuthorizationConfig: 
              AccessPointId: !Ref AuthorityAccessPointId
            RootDirectory: "/"
            TransitEncryption: ENABLED
        - Name: db-mysql-data
          EFSVolumeConfiguration:
            FilesystemId: !Ref VolumeId
            AuthorizationConfig: 
              AccessPointId: !Ref DatabaseAccessPointId
            RootDirectory: "/"
            TransitEncryption: ENABLED
  CloudwatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName:  !Join ["", ["/ecs/", !Ref AWS::StackName, "-lb"]]
      RetentionInDays: 7
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Join ["", [!Ref AWS::StackName, "-cluster"]]
  Service:
    Type: AWS::ECS::Service
    DependsOn: 
      - Listener443
      - Listener80
    Properties: 
      Cluster: !Join ["", [!Ref AWS::StackName, "-cluster"]]
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      EnableECSManagedTags: true
      HealthCheckGracePeriodSeconds: 0
      LaunchType: "EC2"
      LoadBalancers: 
        - ContainerName: "qa-server-app"
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup3000
      PlacementStrategies: 
        - Field: "attribute:ecs.availability-zone"
          Type: "spread"
        - Field: "instanceId"
          Type: "spread"
      SchedulingStrategy: "REPLICA"
      ServiceName: "qa-server-service-2"
      TaskDefinition: !Ref TaskDefinitionName
  ACMCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ["", ["*.", !Ref DomainName]]
      SubjectAlternativeNames:
        - !Ref DomainName
      ValidationMethod: DNS
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join ["", [!Ref AWS::StackName, "-lb"]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroupLB
      Subnets: !Ref SubnetIds
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
      Type: application
  SecurityGroupLB:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group to attach to the service load balancer
      GroupName: !Join ["", [!Ref AWS::StackName, "-service-group"]]
      VpcId: !Ref AWSVpcId
  SecurityGroupHTTPingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SecurityGroupLB'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  SecurityGroupHTTPSingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SecurityGroupLB'
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  SecurityGroupCI:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group to attach to the container instances
      GroupName: !Join ["", [!Ref AWS::StackName, "-instance-group"]]
      VpcId: !Ref AWSVpcId
  SecurityGroupEgressCI:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref SecurityGroupCI
      DestinationSecurityGroupId: !GetAtt SecurityGroupLB.GroupId
  SecurityGroupIngressCI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref SecurityGroupCI
      SourceSecurityGroupId: !GetAtt SecurityGroupLB.GroupId
  SecurityGroupEgressLB:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref SecurityGroupLB
      DestinationSecurityGroupId: !GetAtt SecurityGroupCI.GroupId
  SecurityGroupIngressLB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref SecurityGroupLB
      SourceSecurityGroupId: !GetAtt SecurityGroupCI.GroupId
  SecurityGroup3000inbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupCI
      IpProtocol: tcp
      FromPort: '3000'
      ToPort: '3000'
      CidrIp: 0.0.0.0/0
  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SecurityGroupCI
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0
  TargetGroup3000:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Name: !Join ["", [!Ref AWS::StackName, "-3000"]]
      Port: 3000
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref AWSVpcId
  Listener80:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup3000
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"
  Listener443:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: ECSServiceRole
    Properties:
      Certificates:
        - CertificateArn: !Ref ACMCert
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup3000
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetIds'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '2'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref 'SecurityGroupCI', !Ref 'SecurityGroupLB']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config;echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config
          sudo yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "-qa-ecs-service-role-policy"]]}
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ec2:DescribeTags','ecs:CreateCluster',
              'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:UpdateContainerInstancesState', 'ecs:Submit*', 'ecr:GetAuthorizationToken',
              'ecr:BatchCheckLayerAvailability', 'ecr:GetDownloadUrlForLayer',
              'ecr:BatchGetImage', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
#  If you would rather use the AWS managed policy than the above custom policy, use this:
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "-qa-service-autoscaling-role-policy"]]}
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms',
              'cloudwatch:PutMetricAlarm', 'cloudwatch:DeleteAlarms',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ['ecs-tasks.amazonaws.com','ecs.amazonaws.com']
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "-qa-service-task-role-policy"]]}
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecr:GetAuthorizationToken', 'ecr:BatchCheckLayerAvailability',
              'ecr:GetDownloadUrlForLayer', 'ecr:BatchGetImage', 'logs:CreateLogStream',
              'logs:PutLogEvents']
            Resource: '*'
      - PolicyName: {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "-qa-service-bucket-policy"]]}
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['s3:GetObject']
            Resource: {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "S3BucketName"}, "/*"]]}
          - Effect: Allow
            Action: ['s3:GetBucketLocation']
            Resource: {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "S3BucketName"}, ""]]}
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "-qa-service-ecs-service-policy"]]}
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 
              'elasticloadbalancing:DeregisterTargets', 'elasticloadbalancing:Describe*', 
              'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 
              'ec2:AuthorizeSecurityGroupIngress']
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
Outputs:
  Service:
    Value: !Ref 'Service'
  Cluster:
    Value: !Ref 'EcsCluster'
  LoadBalancer:
    Description: Your Load Balancer's URL. Create a DNS record for {!Ref DomainName} that points to this location.
    Value: !Join ['', [!GetAtt [LoadBalancer, DNSName]]]
  TaskDefinition:
    Value: !Ref 'TaskDefinition'
